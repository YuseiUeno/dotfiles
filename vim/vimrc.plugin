if has("vim_starting")
  set runtimepath+=~/.vim/bundle/neobundle.vim
  call neobundle#rc(expand('~/.vim/bundle/'))
endif

filetype plugin on
filetype plugin indent on " required!
filetype indent on

" Emmet
NeoBundle 'mattn/emmet-vim'
" 補完
NeoBundle 'Shougo/neocomplete.vim'
" スニペット
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
" ファイラー的な
NeoBundle 'Shougo/unite.vim'
" Uniteで関数一覧などのアウトラインを表示する
NeoBundle 'Shougo/unite-outline'
" Rails用のunite
NeoBundle 'basyura/unite-rails'
" ifやdoを入力したら自動的にendを挿入してくれる
NeoBundle 'tpope/vim-endwise'
" vimでgit diff をみる
NeoBundle 'tpope/vim-fugitive'
" :RTとかで対応するviewとかに移動できる
NeoBundle 'tpope/vim-rails'
" テキストを特定の文字で囲んだりする
NeoBundle 'tpope/vim-surround'
" trueとfalseをきりかえたり
NeoBundle 'AndrewRadev/switch.vim'
" 視覚的にreplaceできるやつ
NeoBundle 'osyo-manga/vim-over'
" 選択範囲を外側に広げて検索できる
NeoBundle 'terryma/vim-expand-region'
" 独自のテキストオブジェクトを追加するためのプラグイン
NeoBundle 'kana/vim-textobj-user'
" 1行を表すテキストオブジェクトを追加する
NeoBundle 'kana/vim-textobj-line'
" バッファのなんかのテキストオブジェクト
NeoBundle 'kana/vim-textobj-entire'
" Rubyのブロックを対象にするテキストオブジェクト
NeoBundle 'rhysd/vim-textobj-ruby'
"行単位でdiffをみるためのプラグイン
NeoBundle 'AndrewRadev/linediff.vim'
" シンタックスエラーを見つけてくれるやつ
NeoBundle 'scrooloose/syntastic.git'
" 画面上の見えている範囲の移動を早くするためのプラグイン
NeoBundle 'Lokaltog/vim-easymotion'
" = の位置とかそろえられるやつ！
NeoBundle 'junegunn/vim-easy-align'
" fの検索機能を強化する
NeoBundle 'rhysd/clever-f.vim'
" ステータスラインをかっこよく
NeoBundle 'itchyny/lightline.vim'
" コーディングのログを収集してくれるサービス
NeoBundle 'wakatime/vim-wakatime'
" Gitの変更を見やすくする
NeoBundle 'airblade/vim-gitgutter'

NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
    \ 'mac' : 'make -f make_mac.mak',
    \ 'unix' : 'make -f make_unix.mak',
  \ },
\ }

" CoffeeScriptのシンタックスハイライト
NeoBundle 'kchmck/vim-coffee-script', {'autoload':{'filetypes':['coffee']}}
" jQueryのシンタックスハイライト
NeoBundleLazy 'jelera/vim-javascript-syntax', {'autoload':{'filetypes':['javascript']}}
" scalaのシンタックスハイライト
NeoBundle 'derekwyatt/vim-scala'
" vimのReactハイライト
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'mxw/vim-jsx', {'autoload':{'filetypes':['jsx']}}
" hamlのハイライト
NeoBundle 'tpope/vim-haml'

" ==================================================
" Emmet.
" ==================================================
imap <C-e> <C-y>,

" ==================================================
" Unite
" ==================================================

" Prefix
nnoremap [unite] <nop>
nmap <space>u [unite]

let g:unite_enable_start_insert = 1
let g:unite_enable_split_vertically = 0
let g:unite_winwidth = 40
" 通常のUnite
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files -tab file<CR>
nnoremap <silent> [unite]o :<C-u>Unite outline<CR>

" Ruby
" Controller
nnoremap <silent> [unite]co :<C-u>Unite -tab rails/controller <CR>
" Model
nnoremap <silent> [unite]mo :<C-u>Unite -tab rails/model <CR>
" View
nnoremap <silent> [unite]vi :<C-u>Unite -tab rails/view <CR>
" Helper
nnoremap <silent> [unite]he :<C-u>Unite -tab rails/helper <CR>
" Css
nnoremap <silent> [unite]cs :<C-u>Unite -tab rails/stylesheet <CR>
" JavaScript
nnoremap <silent> [unite]js :<C-u>Unite -tab rails/javascript <CR>
" Config
nnoremap <silent> [unite]cf :<C-u>Unite -tab rails/config <CR>
" Lib
nnoremap <silent> [unite]li :<C-u>Unite -tab rails/lib <CR>
" Spec
nnoremap <silent> [unite]sp :<C-u>Unite -tab rails/spec <CR>
" Db
nnoremap <silent> [unite]db :<C-u>Unite -tab rails/db <CR>

" ==================================================
" neocomplete
" ==================================================

" neocomplcacheを自動起動する
let g:neocomplete#enable_at_startup = 1
" 大文字が入力されるまで大文字小文字を区別しない
let g:neocomplete#enable_smart_case = 1
" シンタックスをキャッシュする際の最小文字長
let g:neocomplete#sources#syntax#min_keyword_length = 3
" バッファ名のパターンを指定する
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" ポップアップで表示される候補の数
let g:neocomplete#max_list = 20
" キャッシュしないファイル名
let g:neocomplete#sources#buffer#disabled_pattern = '\.log\|\.log\.\|\.jax'
" 自動補完を行わないバッファ名
let g:neocomplete#lock_buffer_name_pattern = '\.log\|\.log\.\|.*quickrun.*\|.jax'

" rubyのオムニ補完
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'

" ファイルタイプ毎の補完のディクショナリを指定
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : ''
    \ }

" 補完をキャンセルし元に戻す
inoremap <expr><C-g> neocomplete#undo_completion()

" 補完候補の共通部分のみを補完する
inoremap <expr><C-l> neocomplete#complete_common_string()

" タブで候補を選択できるように
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Enterで候補を選択し、改行もされないようにする
function! s:my_crinsert()
    return pumvisible() ? neocomplete#close_popup() : "\<Cr>"
endfunction
inoremap <silent> <CR> <C-R>=<SID>my_crinsert()<CR>

" <C-h>, <BS>補完を中止する
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

" ==================================================
" neosnippet
" ==================================================
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/dotfiles/vim/snippets/'

" <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" ==================================================
" vim-fugitive
" ==================================================

" Prefix
" nnoremap [fugitive] <Nop>
" nmap ,g [fugitive]
"
" nnoremap <silent> [fugitive]di :Gdiff<CR>
" nnoremap <silent> [fugitive]ad :Gwrite<CR>
" nnoremap <silent> [fugitive]bl :Gblame<CR>
" nnoremap <silent> [fugitive]st :Gstatus<CR>

" ==================================================
" surround.vim
" ==================================================

nnoremap [surround] <Nop>
nmap <Space> [surround]

" ==================================================
" switch.vim
" ==================================================

" Prefix
nnoremap [switch] <Nop>
nmap <Space>t [switch]

inoremap [switch] :Switch<CR>
nnoremap [switch] :Switch<CR>
vnoremap [switch] :Switch<CR>

" ==================================================
" vim-over
" ==================================================

nnoremap [over] <Nop>
nmap <Space>s [over]

nnoremap <silent> [over]s :OverCommandLine<CR>s/
nnoremap <silent> [over]% :OverCommandLine<CR>%s/
nnoremap <silent> [over]1 :OverCommandLine<CR>1
nnoremap <silent> [over]2 :OverCommandLine<CR>2
nnoremap <silent> [over]3 :OverCommandLine<CR>3
nnoremap <silent> [over]4 :OverCommandLine<CR>4
nnoremap <silent> [over]5 :OverCommandLine<CR>5
nnoremap <silent> [over]6 :OverCommandLine<CR>6
nnoremap <silent> [over]7 :OverCommandLine<CR>7
nnoremap <silent> [over]8 :OverCommandLine<CR>8
nnoremap <silent> [over]9 :OverCommandLine<CR>9

" ==================================================
" vim-rails
" ==================================================

nnoremap [rails] <Nop>
nmap <Space>r [rails]

nnoremap <silent> gp :bp<CR>


" ==================================================
" vim-easymotion
" ==================================================

"Disable default mappings
let g:EasyMotion_do_mapping = 0
" 大文字小文字を区別しない
let g:EasyMotion_smartcase = 1

nmap <Space>e <Plug>(easymotion-s2)

" ==================================================
" vim-easy-align
" ==================================================

vnoremap [easy-align] <nop>
vmap <Space>e [easy-align]

vnoremap <silent> [easy-align]= :EasyAlign =<CR>
vnoremap <silent> [easy-align]: :EasyAlign :<CR>

" ==================================================
" vim-lightline
" ==================================================
set laststatus=2
set t_Co=256

let g:lightline = {
  \   'mode_map': {'c': 'NORMAL'},
  \   'active': {
  \     'right': [
  \        [ 'syntastic', 'lineinfo'],
  \        [ 'percent' ],
  \        [ 'fileformat', 'fileencoding', 'filetype' ]
  \      ],
  \     'left':  [ [ 'mode'], ['fugitive'] ]
  \   },
  \   'component_function': {
  \     'modified': 'LightLineModified',
  \     'readonly': 'LightLineReadonly',
  \     'fugitive': 'LightLineFugitive',
  \     'filename': 'LightLineFilename',
  \     'fileformat': 'LightLineFileformat',
  \     'filetype': 'LightLineFiletype',
  \     'mode': 'LightLineMode',
  \   },
  \   'component_expand': {
  \     'syntastic': 'SyntasticStatuslineFlag'
  \   },
  \   'component_type': {
  \     'syntastic': 'error'
  \   }
  \ }

function! LightLineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '🔒 ' : ''
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      return fugitive#head()
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

" ==================================================
" syntastic
" ==================================================
"  mode に active を指定すると保存するたびに、
"          passiveを指定すると :SyntasticCheck を実行時に検出されます
let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': ['ruby'] }
let g:syntastic_ruby_checkers = [ 'rubocop' ]
let g:syntastic_javascript_checkers = [ 'eslint' ]
let g:syntastic_scss_checkers = ['scss_lint']

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost * call s:syntastic()
augroup END

function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

" ==================================================
" vim-scala
" ==================================================
au BufNewFile,BufRead *.scala setf scala
