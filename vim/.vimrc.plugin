set runtimepath^=~/.vim/dein/repos/github.com/Shougo/dein.vim

set nocompatible

call dein#begin(expand('~/.vim/dein'))

  " dein自身をdeinで管理する
  call dein#add('Shougo/dein.vim')
  " vim上でコマンドを実行できるようにするプラグイン
  call dein#add('Shougo/vimproc.vim', {'build' : 'make'})
  " You can specify revision/branch/tag.
  call dein#add('Shougo/vimshell', { 'rev': '3787e5' })
  " Emmet
  call dein#add('mattn/emmet-vim')
  " 補完
  call dein#add('Shougo/neocomplete.vim')
  " スニペット
  call dein#add('Shougo/neosnippet.vim')
  call dein#add('Shougo/neosnippet-snippets')
  " ファイラー的な
  call dein#add('Shougo/unite.vim')
  " Uniteで関数一覧などのアウトラインを表示する
  call dein#add('Shougo/unite-outline')
  " Unite で最近開いたファイルを見れる
  call dein#add('Shougo/neomru.vim')
  " ifやdoを入力したら自動的にendを挿入してくれる
  call dein#add('tpope/vim-endwise')
  " vimでGitを扱う
  call dein#add('tpope/vim-fugitive')
  " Gitの変更を見やすくする
  call dein#add('airblade/vim-gitgutter')
  " :RTとかで対応するviewとかに移動できる
  call dein#add('tpope/vim-rails')
  " テキストを特定の文字で囲んだりする
  call dein#add('tpope/vim-surround')
  " trueとfalseをきりかえたり
  call dein#add('AndrewRadev/switch.vim')
  " 視覚的にreplaceできるやつ
  call dein#add('osyo-manga/vim-over')
  " 選択範囲を外側に広げて検索できる
  call dein#add('terryma/vim-expand-region')
  "行単位でdiffをみるためのプラグイン
  call dein#add('AndrewRadev/linediff.vim')
  " シンタックスエラーを見つけてくれるやつ
  call dein#add('scrooloose/syntastic.git')
  " 画面上の見えている範囲の移動を早くするためのプラグイン
  call dein#add('Lokaltog/vim-easymotion')
  " = の位置とかそろえられるやつ！
  call dein#add('junegunn/vim-easy-align')
  " fの検索機能を強化する
  call dein#add('rhysd/clever-f.vim')
  " ステータスラインをかっこよく
  call dein#add('itchyny/lightline.vim')
  " コーディングのログを収集してくれるサービス
  call dein#add('wakatime/vim-wakatime')

  " ==================================================
  " テキストオブジェクト
  " ==================================================
  " テキストオブジェクト系のプラグインが依存しているプラグイン
  call dein#add('kana/vim-textobj-user')
  " [ al, il ] カーソル行
  call dein#add('kana/vim-textobj-line')
  " [ ae, ie ] バッファ全体
  call dein#add('kana/vim-textobj-entire')
  " [ au, iu ] Url
  call dein#add('mattn/vim-textobj-url')
  " [ ac, ic ] コメント
  call dein#add("thinca/vim-textobj-comment")
  " [ a, , i, ] 引数
  call dein#add("sgur/vim-textobj-parameter")

  " ==================================================
  " シンタックスハイライト
  " ==================================================
  " Coffee
  call dein#add('kchmck/vim-coffee-script', {'autoload':{'filetypes':['coffee']}})
  " Scala
  call dein#add('derekwyatt/vim-scala')
  " React
  call dein#add('pangloss/vim-javascript')
  call dein#add('mxw/vim-jsx')
  " haml
  call dein#add('tpope/vim-haml')

call dein#end()

filetype plugin on
filetype plugin indent on
filetype indent on

" ==================================================
" Unite
" ==================================================

" Prefix
nnoremap [unite] <nop>
nmap <space>u [unite]

let g:unite_enable_start_insert = 1
let g:unite_enable_split_vertically = 0
let g:unite_winwidth = 40

" Unite
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -tab -buffer-name=files file<CR>
nnoremap <silent> [unite]o :<C-u>Unite outline<CR>
nnoremap <silent> [unite]r :<C-u>Unite -tab file_mru buffer<CR>

" Ruby
" Controller
nnoremap <silent> [unite]co :call UniteFileRec('/app/controllers')<CR>
" Model
nnoremap <silent> [unite]mo :call UniteFileRec('/app/models')<CR>
" View
nnoremap <silent> [unite]vi :call UniteFileRec('/app/views')<CR>
" Helper
nnoremap <silent> [unite]he :call UniteFileRec('/app/helpers')<CR>
" Decorator
nnoremap <silent> [unite]de :call UniteFileRec('/app/decorators')<CR>
" Validator
nnoremap <silent> [unite]va :call UniteFileRec('/app/validators')<CR>
" Factory
nnoremap <silent> [unite]fa :call UniteFileRec('/app/factories')<CR>
" Form
nnoremap <silent> [unite]fo :call UniteFileRec('/app/forms')<CR>
" Service
nnoremap <silent> [unite]se :call UniteFileRec('/app/services')<CR>
" Css
nnoremap <silent> [unite]cs :call UniteFileRec('/app/assets/stylesheets')<CR>
nnoremap <silent> [unite]fc :call UniteFileRec('/app/frontend/stylesheets')<CR>
" JavaScript
nnoremap <silent> [unite]js :call UniteFileRec('/app/assets/javascripts')<CR>
nnoremap <silent> [unite]fj :call UniteFileRec('/app/frontend/javascripts')<CR>
" Config
nnoremap <silent> [unite]cf :call UniteFileRec('/config')<CR>
" Lib
nnoremap <silent> [unite]li :call UniteFileRec('/lib')<CR>
" Spec
nnoremap <silent> [unite]sp :call UniteFileRec('/spec')<CR>
" Db
nnoremap <silent> [unite]db :call UniteFileRec('/db')<CR>
" Test
nnoremap <silent> [unite]tj :call UniteFileRec('/test/js/unit')<CR>

" Grep
nnoremap <silent> [unite]g :<C-u>Unite -tab grep -buffer-name=grep<CR>
if executable('hw')
  let g:unite_source_grep_command = 'hw'
  let g:unite_source_grep_default_opts = '--no-group --no-color'
  let g:unite_source_grep_recursive_opt = ''
endif

function! UniteFileRec(path)
  call unite#start#standard([[ 'file_rec/async', b:rails_root.a:path ]], {"tab": 1})
endfunction

" ==================================================
" neocomplete
" ==================================================

" neocomplcacheを自動起動する
let g:neocomplete#enable_at_startup = 1
" 大文字が入力されるまで大文字小文字を区別しない
let g:neocomplete#enable_smart_case = 1
" シンタックスをキャッシュする際の最小文字長
let g:neocomplete#sources#syntax#min_keyword_length = 3
" バッファ名のパターンを指定する
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" ポップアップで表示される候補の数
let g:neocomplete#max_list = 20
" キャッシュしないファイル名
let g:neocomplete#sources#buffer#disabled_pattern = '\.log\|\.log\.\|\.jax'
" 自動補完を行わないバッファ名
let g:neocomplete#lock_buffer_name_pattern = '\.log\|\.log\.\|.*quickrun.*\|.jax'

" rubyのオムニ補完
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'

" ファイルタイプ毎の補完のディクショナリを指定
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : ''
    \ }

" 補完をキャンセルし元に戻す
inoremap <expr><C-g> neocomplete#undo_completion()

" 補完候補の共通部分のみを補完する
inoremap <expr><C-l> neocomplete#complete_common_string()

" Enterで候補を選択し、改行もされないようにする
function! s:my_crinsert()
    return pumvisible() ? neocomplete#close_popup() : "\<Cr>"
endfunction
inoremap <silent> <CR> <C-R>=<SID>my_crinsert()<CR>

" <C-h>, <BS>補完を禁止
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

" ==================================================
" neosnippet
" ==================================================
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/dotfiles/vim/snippets/'

inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" ==================================================
" vim-fugitive
" ==================================================

nnoremap [fugitive] <Nop>
nmap ff [fugitive]

nnoremap <silent> [fugitive]df :Gdiff<CR>
nnoremap <silent> [fugitive]ad :Gwrite<CR>
nnoremap <silent> [fugitive]cv :Gcommit -v<CR>
nnoremap <silent> [fugitive]cam :Gcommit --amend<CR>
nnoremap <silent> [fugitive]bl :Gblame<CR>
nnoremap <silent> [fugitive]st :Gstatus<CR>

" ==================================================
" switch.vim
" ==================================================

" Prefix
nnoremap [switch] <Nop>
nmap <Space>t [switch]

inoremap [switch] :Switch<CR>
nnoremap [switch] :Switch<CR>
vnoremap [switch] :Switch<CR>

" ==================================================
" vim-over
" ==================================================

nnoremap [over] <Nop>
nmap <Space>s [over]

nnoremap <silent> [over]s :OverCommandLine<CR>s/
nnoremap <silent> [over]% :OverCommandLine<CR>%s/
nnoremap <silent> [over]1 :OverCommandLine<CR>1
nnoremap <silent> [over]2 :OverCommandLine<CR>2
nnoremap <silent> [over]3 :OverCommandLine<CR>3
nnoremap <silent> [over]4 :OverCommandLine<CR>4
nnoremap <silent> [over]5 :OverCommandLine<CR>5
nnoremap <silent> [over]6 :OverCommandLine<CR>6
nnoremap <silent> [over]7 :OverCommandLine<CR>7
nnoremap <silent> [over]8 :OverCommandLine<CR>8
nnoremap <silent> [over]9 :OverCommandLine<CR>9

" ==================================================
" vim-rails
" ==================================================

nnoremap [rails] <Nop>
nmap <Space>r [rails]

nnoremap <silent> gp :bp<CR>

" ==================================================
" vim-easymotion
" ==================================================

"Disable default mappings
let g:EasyMotion_do_mapping = 0
" 大文字小文字を区別しない
let g:EasyMotion_smartcase = 1

nmap <Space>e <Plug>(easymotion-s2)

" ==================================================
" vim-easy-align
" ==================================================

xmap <Space>e <Plug>(EasyAlign)

" ==================================================
" vim-lightline
" ==================================================
set laststatus=2
set t_Co=256

let g:lightline = {
  \   'mode_map': {'c': 'NORMAL'},
  \   'active': {
  \     'right': [
  \        [ 'syntastic', 'lineinfo'],
  \        [ 'percent' ],
  \        [ 'fileformat', 'fileencoding', 'filetype' ]
  \      ],
  \     'left':  [ [ 'mode'], ['fugitive'] ]
  \   },
  \   'component_function': {
  \     'modified': 'LightLineModified',
  \     'readonly': 'LightLineReadonly',
  \     'fugitive': 'LightLineFugitive',
  \     'filename': 'LightLineFilename',
  \     'fileformat': 'LightLineFileformat',
  \     'filetype': 'LightLineFiletype',
  \     'mode': 'LightLineMode',
  \   },
  \   'component_expand': {
  \     'syntastic': 'SyntasticStatuslineFlag'
  \   },
  \   'component_type': {
  \     'syntastic': 'error'
  \   }
  \ }

function! LightLineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '🔒 ' : ''
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      return fugitive#head()
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

" ==================================================
" syntastic
" ==================================================
"  mode に active を指定すると保存するたびに、
"          passiveを指定すると :SyntasticCheck を実行時に検出されます
let g:syntastic_ruby_checkers = [ 'rubocop' ]
let g:syntastic_javascript_checkers = [ 'eslint' ]
let g:syntastic_scss_checkers = ['scss_lint']

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost * call s:syntastic()
augroup END

function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

" ==================================================
" Emmet
" ==================================================
let g:user_emmet_expandabbr_key='<c-e>'
