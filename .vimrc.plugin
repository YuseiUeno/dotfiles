if has("vim_starting")
  set runtimepath+=~/.vim/bundle/neobundle.vim
  call neobundle#rc(expand('~/.vim/bundle/'))
endif

filetype plugin on
filetype plugin indent on " required!
filetype indent on

" Emmet
NeoBundle 'mattn/emmet-vim'
" " 補完
" NeoBundle 'Shougo/neocomplete.vim'
" ファイラー的な
NeoBundle 'Shougo/unite.vim'
" Uniteで関数一覧などのアウトラインを表示する
NeoBundle 'Shougo/unite-outline'
" ifやdoを入力したら自動的にendを挿入してくれる
NeoBundle 'tpope/vim-endwise'
" vimでgit diff をみる
NeoBundle 'tpope/vim-fugitive'
" :RTとかで対応するviewとかに移動できる
NeoBundle 'tpope/vim-rails'
" テキストを特定の文字で囲んだりする
NeoBundle 'tpope/vim-surround'

NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
    \ 'mac' : 'make -f make_mac.mak',
    \ 'unix' : 'make -f make_unix.mak',
  \ },
\ }

" Emmet. "{{{
imap <C-e> <C-y>,
"}}}

" Unite "{{{

" Prefix
nnoremap [unite] <Nop>
nmap <Space>u [unite]

let g:unite_enable_start_insert = 1
let g:unite_enable_split_vertically = 0
let g:unite_winwidth = 40
" 通常のUnite
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files -tab file<CR>
nnoremap <silent> [unite]o :<C-u>Unite outline<CR>

" Ruby
" Controller
nnoremap <silent> [unite]co :<C-u>Unite -tab file_rec/async:app/controllers/ <CR>
" Model
nnoremap <silent> [unite]mo :<C-u>Unite -tab file_rec/async:app/models/ <CR>
" View
nnoremap <silent> [unite]vi :<C-u>Unite -tab file_rec/async:app/views/ <CR>
" Form
nnoremap <silent> [unite]fo :<C-u>Unite -tab file_rec/async:app/forms/ <CR>
" Css
nnoremap <silent> [unite]cs :<C-u>Unite -tab file_rec/async:app/assets/stylesheets/ <CR>
" JavaScript
nnoremap <silent> [unite]js :<C-u>Unite -tab file_rec/async:app/assets/javascripts/ <CR>
" Config
nnoremap <silent> [unite]cf :<C-u>Unite -tab file_rec/async:config/ <CR>
" Lib
nnoremap <silent> [unite]li :<C-u>Unite -tab file_rec/async:lib/ <CR>
" Spec
nnoremap <silent> [unite]sp :<C-u>Unite -tab file_rec/async:spec/ <CR>
" Db
nnoremap <silent> [unite]db :<C-u>Unite -tab file_rec/async:db/ <CR>

" タブで開く
" au FileType unite nnoremap <silent> <buffer> <expr> <C-t> unite#do_action('tabopen')
" au FileType unite inoremap <silent> <buffer> <expr> <C-t> unite#do_action('tabopen')

"}}}

" neocomplete. "{{{
"
" " neocomplcacheを自動起動する
" let g:neocomplete#enable_at_startup = 1
" " 大文字が入力されるまで大文字小文字を区別しない
" let g:neocomplete#enable_smart_case = 1
" " シンタックスをキャッシュする際の最小文字長
" let g:neocomplete#sources#syntax#min_keyword_length = 3
" " バッファ名のパターンを指定する
" let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" " ポップアップで表示される候補の数
" let g:neocomplete#max_list = 20
"
" " ファイルタイプ毎の補完のディクショナリを指定
" let g:neocomplcache_dictionary_filetype_lists = {
"     \ 'default' : ''
"     \ }
"
" " 補完をキャンセルし元に戻す
" inoremap <expr><C-g> neocomplete#undo_completion()
"
" " 補完候補の共通部分のみを補完する
" inoremap <expr><C-l> neocomplete#complete_common_string()
"
" " タブで候補を選択できるように
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
"
" " Enterで候補を選択し、改行もされないようにする
" function! s:my_crinsert()
"     return pumvisible() ? neocomplete#close_popup() : "\<Cr>"
" endfunction
" inoremap <silent> <CR> <C-R>=<SID>my_crinsert()<CR>
"
" " <C-h>, <BS>補完を中止する
" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"
" }}}

" vim-fugitive " {{{

" Prefix
nnoremap [fugitive] <Nop>
nmap <Space>g [fugitive]

nnoremap <silent> [fugitive]di :Gdiff<CR>

" }}}
